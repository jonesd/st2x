start of test 1 - basic stuff

ent1 == PositionEntry(0!<one> -> 0!<two>); key is 0!<one>; and value is 0!<two>; next is null

test match of ent1 with 0!<one>: TRUE
test match of ent1 with 0!<two>: FALSE
test matchValue of ent1 with 0!<one>: FALSE
test matchValue of ent1 with 0!<two>: TRUE
end of test one

start of test 2 - linking stuff

ent1 == PositionEntry(0!<one> -> 0!<value>); key is 0!<one>; and value is 0!<value>; next is null

ent2 == PositionEntry(0!<two> -> 0!<value>); key is 0!<two>; and value is 0!<value>; next is null

ent3 == PositionEntry(0!<three> -> 0!<value>); key is 0!<three>; and value is 0!<value>; next is null
ent1 next now: PositionEntry(0!<two> -> 0!<value>)
ent2 next now: PositionEntry(0!<three> -> 0!<value>)
ent3 next now: null
start of test 2 - different entry types

ent1 == PositionEntry(0!<one> -> 0!<value>); key is 0!<one>; and value is 0!<value>; next is null

ent2 == IndexEntry(I(1) -> 0!<value>); key is I(1); and value is 0!<value>; next is null

ent2 == IndexEntry(I(1) -> 0!<value>); key is I(1); and value is 0!<value>; next is null

ent3 == HeaperAsEntry(position of (0!<three>) -> 0!<three>); key is position of (0!<three>); and value is 0!<three>; next is null

ent4 == HashIndexEntry(I(173133854) -> 0!<value>); key is I(173133854); and value is 0!<value>; next is null

ent4 == HashIndexEntry(I(173133854) -> 0!<value>); key is I(173133854); and value is 0!<value>; next is null
