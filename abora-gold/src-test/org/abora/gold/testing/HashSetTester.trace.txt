HashSet testing
MuSet testing
Start ScruSet testing
testing isEmpty
end of isEmpty tests
testing hasMember and theOne
end of hasMember and theOne tests
testing contentsEqual() and contentsHash()
end of ContentsEqual tests
testing intersects
end of intersects tests
testing isSubsetOf
end of isSubsetOf tests
End of Scruset testing
start binary tests
end binary tests
End of MuSet testing

basic tests -- start with creation.
basic hash set is: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null


basic set on heaper is: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(123456, 0!!<[104 101 97 112 101 114]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, -1193038) 123456,	org.abora.gold.set.SHTO(123456, 0!!<[104 101 97 112 101 114]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null


basic set make(4) is: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null


basic set make(19) is: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null
7:	(0, 7) 0,	null
8:	(0, 8) 0,	null
9:	(0, 9) 0,	null
10:	(0, 10) 0,	null
11:	(0, 11) 0,	null
12:	(0, 12) 0,	null
13:	(0, 13) 0,	null
14:	(0, 14) 0,	null
15:	(0, 15) 0,	null
16:	(0, 16) 0,	null
17:	(0, 17) 0,	null
18:	(0, 18) 0,	null


basic set make(0) is: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

copy of org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(123456, 0!!<[104 101 97 112 101 114]>)} is org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(123456, 0!!<[104 101 97 112 101 114]>)}
internals of source:
tally == 1
0:	(0, 0) 0,	null
1:	(1, -1193038) 123456,	org.abora.gold.set.SHTO(123456, 0!!<[104 101 97 112 101 114]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null


internals of copy:
tally == 1
0:	(0, 0) 0,	null
1:	(1, -1193038) 123456,	org.abora.gold.set.SHTO(123456, 0!!<[104 101 97 112 101 114]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null



End of basic tests

introduce tests
set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(0, 0!!<[102 105 114 115 116]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(0, 0!!<[102 105 114 115 116]>)} internals:
tally == 1
0:	(0, 0) 0,	org.abora.gold.set.SHTO(0, 0!!<[102 105 114 115 116]>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(1, 0!!<[115 101 99 111 110 100]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[115 101 99 111 110 100]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[115 101 99 111 110 100]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(6, 0!!<[116 104 105 114 100]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(6, 0!!<[116 104 105 114 100]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(6, 0) 6,	org.abora.gold.set.SHTO(6, 0!!<[116 104 105 114 100]>)

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(7, 0!!<[102 111 117 114 116 104]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(7, 0!!<[102 111 117 114 116 104]>)} internals:
tally == 1
0:	(0, 0) 7,	org.abora.gold.set.SHTO(7, 0!!<[102 111 117 114 116 104]>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)

PROBLEM: org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>) is already in set!!
set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 4
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(2, 2) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null



End of introduce tests

store tests
set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: org.abora.gold.set.SHTO(0, 0!!<[102 105 114 115 116]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(0, 0!!<[102 105 114 115 116]>)} internals:
tally == 1
0:	(0, 0) 0,	org.abora.gold.set.SHTO(0, 0!!<[102 105 114 115 116]>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: org.abora.gold.set.SHTO(1, 0!!<[115 101 99 111 110 100]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[115 101 99 111 110 100]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[115 101 99 111 110 100]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: org.abora.gold.set.SHTO(6, 0!!<[116 104 105 114 100]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(6, 0!!<[116 104 105 114 100]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(6, 0) 6,	org.abora.gold.set.SHTO(6, 0!!<[116 104 105 114 100]>)

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: org.abora.gold.set.SHTO(7, 0!!<[102 111 117 114 116 104]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(7, 0!!<[102 111 117 114 116 104]>)} internals:
tally == 1
0:	(0, 0) 7,	org.abora.gold.set.SHTO(7, 0!!<[102 111 117 114 116 104]>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

testing storeAll

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(2, 0!!<[100 117 98 108 101]>), org.abora.gold.set.SHTO(3, 0!!<[116 114 105 112 108 101]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[100 117 98 108 101]>)
3:	(3, 0) 3,	org.abora.gold.set.SHTO(3, 0!!<[116 114 105 112 108 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: org.abora.gold.set.SHTO(4, 0!!<[113 117 97 100 108 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(2, 0!!<[100 117 98 108 101]>), org.abora.gold.set.SHTO(3, 0!!<[116 114 105 112 108 101]>), org.abora.gold.set.SHTO(4, 0!!<[113 117 97 100 108 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[100 117 98 108 101]>)
3:	(3, 0) 3,	org.abora.gold.set.SHTO(3, 0!!<[116 114 105 112 108 101]>)
4:	(4, 0) 4,	org.abora.gold.set.SHTO(4, 0!!<[113 117 97 100 108 101]>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: org.abora.gold.set.SHTO(1, 0!!<[111 110 101 108 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101 108 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 4
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101 108 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
4:	(1, 3) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

after storeAll, set1 now:
tally == 7
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
4:	(1, 3) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101 108 101]>)
5:	(2, 3) 2,	org.abora.gold.set.SHTO(2, 0!!<[100 117 98 108 101]>)
6:	(3, 3) 3,	org.abora.gold.set.SHTO(3, 0!!<[116 114 105 112 108 101]>)
7:	(4, 3) 4,	org.abora.gold.set.SHTO(4, 0!!<[113 117 97 100 108 101]>)
8:	(0, 8) 0,	null
9:	(0, 9) 0,	null
10:	(0, 10) 0,	null
11:	(0, 11) 0,	null
12:	(0, 12) 0,	null
13:	(0, 13) 0,	null
14:	(0, 14) 0,	null
15:	(0, 15) 0,	null
16:	(0, 16) 0,	null
17:	(0, 17) 0,	null
18:	(0, 18) 0,	null

after storeAll, set2 now:
tally == 3
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[100 117 98 108 101]>)
3:	(3, 0) 3,	org.abora.gold.set.SHTO(3, 0!!<[116 114 105 112 108 101]>)
4:	(4, 0) 4,	org.abora.gold.set.SHTO(4, 0!!<[113 117 97 100 108 101]>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null



End of store tests

wipe tests
set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(0, 0!!<[111 110 101]>)} internals:
tally == 1
0:	(0, 0) 0,	org.abora.gold.set.SHTO(0, 0!!<[111 110 101]>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(0, 0!!<[111 110 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(6, 0!!<[116 104 114 101 101]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(6, 0) 6,	org.abora.gold.set.SHTO(6, 0!!<[116 104 114 101 101]>)

set1 wipe: org.abora.gold.set.SHTO(6, 0!!<[116 104 114 101 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(7, 0!!<[102 111 117 114]>)} internals:
tally == 1
0:	(0, 0) 7,	org.abora.gold.set.SHTO(7, 0!!<[102 111 117 114]>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(7, 0!!<[102 111 117 114]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 4
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(2, 2) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(2, 1) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(2, 1) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 4
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(2, 2) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
3:	(2, 1) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
3:	(2, 1) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>), org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)} internals:
tally == 4
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(2, 2) 2,	org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(2, 0!!<[102 111 119 101 114]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>), org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
3:	(1, 2) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(1, 0!!<[116 104 114 101 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>), org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
2:	(1, 1) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(1, 0!!<[116 119 111]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: org.abora.gold.set.SHTO(1, 0!!<[111 110 101]>)
set1 now: org.abora.gold.collection.sets.ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null



End of wipe tests

	
start of big testing.
 
new big set (count 10000) is:
org.abora.gold.collection.sets.ActualHashSet{org.abora.gold.set.SHTO(1, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(2, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(3, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(4, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(5, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(6, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(7, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(8, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(9, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(d, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(e, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(f, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(10, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(11, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(12, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(13, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(14, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(15, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(16, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(17, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(18, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(19, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(1a, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(1b, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(1c, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(1d, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(1e, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(1f, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(20, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(21, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(22, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(23, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(24, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(25, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(26, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(27, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(28, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(29, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(2a, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(2b, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(2c, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(2d, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(2e, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(2f, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(30, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(31, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(32, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(33, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(34, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(35, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(36, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(37, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(38, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(39, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(3a, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(3b, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(3c, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(3d, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(3e, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(3f, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(40, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(41, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(42, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(43, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(44, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(45, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(46, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(47, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(48, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(49, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(4a, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(4b, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(4c, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(4d, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(4e, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(4f, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(50, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(51, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(52, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(53, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(54, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(55, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(56, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(57, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(58, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(59, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(5a, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(5b, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(5c, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(5d, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(5e, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(5f, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(60, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(61, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(62, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(63, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(64, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(65, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(66, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(67, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(68, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(69, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(6a, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(6b, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(6c, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(6d, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(6e, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(6f, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(70, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(71, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(72, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(73, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(74, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(75, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(76, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(77, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(78, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(79, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(7a, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(7b, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(7c, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(7d, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(7e, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(7f, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(80, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(81, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(82, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(83, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(84, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(85, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(86, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(87, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(88, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(89, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(8a, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(8b, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(8c, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(8d, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(8e, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(8f, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(90, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(91, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(92, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(93, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(94, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(95, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(96, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(97, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(98, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(99, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(9a, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(9b, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(9c, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(9d, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(9e, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(9f, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a0, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a1, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a2, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a3, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a4, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a5, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a6, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a7, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a8, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(a9, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(aa, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(ab, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(ac, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(ad, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(ae, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(af, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b0, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b1, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b2, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b3, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b4, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b5, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b6, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b7, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b8, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(b9, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(ba, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(bb, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(bc, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(bd, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(be, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(bf, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c0, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c1, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c2, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c3, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c4, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c5, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c6, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c7, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c8, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), org.abora.gold.set.SHTO(c9, 0!!<[115 111 109 101 32 111 98 106 101 99 116]>), etc...}

	

big2 is a copy of big1 (count 10000)

big2 is a subset of big1
big1 is a subset of big2

big2 now has every third element removed (count 6667)

big2 is a subset of big1
big1 is NOT a subset of big2
big3 is big1-big2 - count 3333

big3 is a subset of big1
big1 is NOT a subset of big3
big3 is NOT a subset of big2
big2 is NOT a subset of big3


end of bigset testing

End of black box testing - now for the White!!


End of HashSet testing

