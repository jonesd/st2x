HashSet testing
MuSet testing
Start ScruSet testing
testing isEmpty
end of isEmpty tests
testing hasMember and theOne
end of hasMember and theOne tests
testing contentsEqual() and contentsHash()
end of ContentsEqual tests
testing intersects
end of intersects tests
testing isSubsetOf
end of isSubsetOf tests
End of Scruset testing
start binary tests
end binary tests
End of MuSet testing

basic tests -- start with creation.
basic hash set is: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null


basic set on heaper is: ActualHashSet{SHTO(123456, 0!<heaper>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, -1193038) 123456,	SHTO(123456, 0!<heaper>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null


basic set make(4) is: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null


basic set make(19) is: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null
7:	(0, 7) 0,	null
8:	(0, 8) 0,	null
9:	(0, 9) 0,	null
10:	(0, 10) 0,	null
11:	(0, 11) 0,	null
12:	(0, 12) 0,	null
13:	(0, 13) 0,	null
14:	(0, 14) 0,	null
15:	(0, 15) 0,	null
16:	(0, 16) 0,	null
17:	(0, 17) 0,	null
18:	(0, 18) 0,	null


basic set make(0) is: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

copy of ActualHashSet{SHTO(123456, 0!<heaper>)} is ActualHashSet{SHTO(123456, 0!<heaper>)}
internals of source:
tally == 1
0:	(0, 0) 0,	null
1:	(1, -1193038) 123456,	SHTO(123456, 0!<heaper>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null


internals of copy:
tally == 1
0:	(0, 0) 0,	null
1:	(1, -1193038) 123456,	SHTO(123456, 0!<heaper>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null



End of basic tests

introduce tests
set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(0, 0!<first>)
set1 now: ActualHashSet{SHTO(0, 0!<first>)} internals:
tally == 1
0:	(0, 0) 0,	SHTO(0, 0!<first>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(1, 0!<second>)
set1 now: ActualHashSet{SHTO(1, 0!<second>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<second>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(6, 0!<third>)
set1 now: ActualHashSet{SHTO(6, 0!<third>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(6, 0) 6,	SHTO(6, 0!<third>)

set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(7, 0!<fourth>)
set1 now: ActualHashSet{SHTO(7, 0!<fourth>)} internals:
tally == 1
0:	(0, 0) 7,	SHTO(7, 0!<fourth>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(1, 0!<one>)
set1 now: ActualHashSet{SHTO(1, 0!<one>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<one>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(1, 0!<two>)
set1 now: ActualHashSet{SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(1, 1) 1,	SHTO(1, 0!<one>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(1, 1) 1,	SHTO(1, 0!<one>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(1, 0!<three>)
set1 now: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(1, 0!<one>)

PROBLEM: SHTO(1, 0!<one>) is already in set!
set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(1, 0!<one>)
set1 now: ActualHashSet{SHTO(1, 0!<one>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<one>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(1, 0!<two>)
set1 now: ActualHashSet{SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(1, 1) 1,	SHTO(1, 0!<one>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(1, 1) 1,	SHTO(1, 0!<one>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(1, 0!<three>)
set1 now: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 introduce: SHTO(2, 0!<fower>)
set1 now: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>), SHTO(2, 0!<fower>)} internals:
tally == 4
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(2, 2) 2,	SHTO(2, 0!<fower>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null



End of introduce tests

store tests
set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: SHTO(0, 0!<first>)
set1 now: ActualHashSet{SHTO(0, 0!<first>)} internals:
tally == 1
0:	(0, 0) 0,	SHTO(0, 0!<first>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: SHTO(1, 0!<second>)
set1 now: ActualHashSet{SHTO(1, 0!<second>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<second>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: SHTO(6, 0!<third>)
set1 now: ActualHashSet{SHTO(6, 0!<third>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(6, 0) 6,	SHTO(6, 0!<third>)

set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: SHTO(7, 0!<fourth>)
set1 now: ActualHashSet{SHTO(7, 0!<fourth>)} internals:
tally == 1
0:	(0, 0) 7,	SHTO(7, 0!<fourth>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: SHTO(1, 0!<one>)
set1 now: ActualHashSet{SHTO(1, 0!<one>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<one>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: SHTO(1, 0!<two>)
set1 now: ActualHashSet{SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(1, 1) 1,	SHTO(1, 0!<one>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(1, 1) 1,	SHTO(1, 0!<one>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: SHTO(1, 0!<three>)
set1 now: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: SHTO(1, 0!<one>)
set1 now: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

testing storeAll

set1 starts as: ActualHashSet{SHTO(2, 0!<duble>), SHTO(3, 0!<triple>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	SHTO(2, 0!<duble>)
3:	(3, 0) 3,	SHTO(3, 0!<triple>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: SHTO(4, 0!<quadle>)
set1 now: ActualHashSet{SHTO(2, 0!<duble>), SHTO(3, 0!<triple>), SHTO(4, 0!<quadle>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	SHTO(2, 0!<duble>)
3:	(3, 0) 3,	SHTO(3, 0!<triple>)
4:	(4, 0) 4,	SHTO(4, 0!<quadle>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 store: SHTO(1, 0!<onele>)
set1 now: ActualHashSet{SHTO(1, 0!<onele>), SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 4
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<onele>)
2:	(1, 1) 1,	SHTO(1, 0!<three>)
3:	(1, 2) 1,	SHTO(1, 0!<two>)
4:	(1, 3) 1,	SHTO(1, 0!<one>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

after storeAll, set1 now:
tally == 7
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<three>)
4:	(1, 3) 1,	SHTO(1, 0!<onele>)
5:	(2, 3) 2,	SHTO(2, 0!<duble>)
6:	(3, 3) 3,	SHTO(3, 0!<triple>)
7:	(4, 3) 4,	SHTO(4, 0!<quadle>)
8:	(0, 8) 0,	null
9:	(0, 9) 0,	null
10:	(0, 10) 0,	null
11:	(0, 11) 0,	null
12:	(0, 12) 0,	null
13:	(0, 13) 0,	null
14:	(0, 14) 0,	null
15:	(0, 15) 0,	null
16:	(0, 16) 0,	null
17:	(0, 17) 0,	null
18:	(0, 18) 0,	null

after storeAll, set2 now:
tally == 3
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	SHTO(2, 0!<duble>)
3:	(3, 0) 3,	SHTO(3, 0!<triple>)
4:	(4, 0) 4,	SHTO(4, 0!<quadle>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null



End of store tests

wipe tests
set1 starts as: ActualHashSet{SHTO(0, 0!<one>)} internals:
tally == 1
0:	(0, 0) 0,	SHTO(0, 0!<one>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(0, 0!<one>)
set1 now: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<two>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(1, 0!<two>)
set1 now: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(6, 0!<three>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(6, 0) 6,	SHTO(6, 0!<three>)

set1 wipe: SHTO(6, 0!<three>)
set1 now: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(7, 0!<four>)} internals:
tally == 1
0:	(0, 0) 7,	SHTO(7, 0!<four>)
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(7, 0!<four>)
set1 now: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>), SHTO(2, 0!<fower>)} internals:
tally == 4
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(2, 2) 2,	SHTO(2, 0!<fower>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(1, 0!<one>)
set1 now: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(2, 0!<fower>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(2, 1) 2,	SHTO(2, 0!<fower>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(2, 0!<fower>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(2, 1) 2,	SHTO(2, 0!<fower>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(1, 0!<two>)
set1 now: ActualHashSet{SHTO(1, 0!<three>), SHTO(2, 0!<fower>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(2, 0) 2,	SHTO(2, 0!<fower>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<three>), SHTO(2, 0!<fower>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(2, 0) 2,	SHTO(2, 0!<fower>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(1, 0!<three>)
set1 now: ActualHashSet{SHTO(2, 0!<fower>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	SHTO(2, 0!<fower>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(2, 0!<fower>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	SHTO(2, 0!<fower>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(2, 0!<fower>)
set1 now: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>), SHTO(2, 0!<fower>)} internals:
tally == 4
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(2, 2) 2,	SHTO(2, 0!<fower>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(1, 0!<three>)
set1 now: ActualHashSet{SHTO(1, 0!<two>), SHTO(1, 0!<one>), SHTO(2, 0!<fower>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(1, 1) 1,	SHTO(1, 0!<one>)
3:	(2, 1) 2,	SHTO(2, 0!<fower>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<two>), SHTO(1, 0!<one>), SHTO(2, 0!<fower>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(1, 1) 1,	SHTO(1, 0!<one>)
3:	(2, 1) 2,	SHTO(2, 0!<fower>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(1, 0!<two>)
set1 now: ActualHashSet{SHTO(1, 0!<one>), SHTO(2, 0!<fower>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(2, 0) 2,	SHTO(2, 0!<fower>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<one>), SHTO(2, 0!<fower>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(2, 0) 2,	SHTO(2, 0!<fower>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(1, 0!<one>)
set1 now: ActualHashSet{SHTO(2, 0!<fower>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	SHTO(2, 0!<fower>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(2, 0!<fower>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(2, 0) 2,	SHTO(2, 0!<fower>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(2, 0!<fower>)
set1 now: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>), SHTO(2, 0!<fower>)} internals:
tally == 4
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(2, 2) 2,	SHTO(2, 0!<fower>)
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(2, 0!<fower>)
set1 now: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<three>), SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 3
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<three>)
2:	(1, 1) 1,	SHTO(1, 0!<two>)
3:	(1, 2) 1,	SHTO(1, 0!<one>)
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(1, 0!<three>)
set1 now: ActualHashSet{SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(1, 1) 1,	SHTO(1, 0!<one>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<two>), SHTO(1, 0!<one>)} internals:
tally == 2
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<two>)
2:	(1, 1) 1,	SHTO(1, 0!<one>)
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(1, 0!<two>)
set1 now: ActualHashSet{SHTO(1, 0!<one>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 starts as: ActualHashSet{SHTO(1, 0!<one>)} internals:
tally == 1
0:	(0, 0) 0,	null
1:	(1, 0) 1,	SHTO(1, 0!<one>)
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null

set1 wipe: SHTO(1, 0!<one>)
set1 now: ActualHashSet{nullSet} internals:
tally == 0
0:	(0, 0) 0,	null
1:	(0, 1) 0,	null
2:	(0, 2) 0,	null
3:	(0, 3) 0,	null
4:	(0, 4) 0,	null
5:	(0, 5) 0,	null
6:	(0, 6) 0,	null



End of wipe tests

	
start of big testing.
 
new big set (count 10000) is:
ActualHashSet{SHTO(1, 0!<some object>), SHTO(2, 0!<some object>), SHTO(3, 0!<some object>), SHTO(4, 0!<some object>), SHTO(5, 0!<some object>), SHTO(6, 0!<some object>), SHTO(7, 0!<some object>), SHTO(8, 0!<some object>), SHTO(9, 0!<some object>), SHTO(A, 0!<some object>), SHTO(B, 0!<some object>), SHTO(C, 0!<some object>), SHTO(D, 0!<some object>), SHTO(E, 0!<some object>), SHTO(F, 0!<some object>), SHTO(10, 0!<some object>), SHTO(11, 0!<some object>), SHTO(12, 0!<some object>), SHTO(13, 0!<some object>), SHTO(14, 0!<some object>), SHTO(15, 0!<some object>), SHTO(16, 0!<some object>), SHTO(17, 0!<some object>), SHTO(18, 0!<some object>), SHTO(19, 0!<some object>), SHTO(1A, 0!<some object>), SHTO(1B, 0!<some object>), SHTO(1C, 0!<some object>), SHTO(1D, 0!<some object>), SHTO(1E, 0!<some object>), SHTO(1F, 0!<some object>), SHTO(20, 0!<some object>), SHTO(21, 0!<some object>), SHTO(22, 0!<some object>), SHTO(23, 0!<some object>), SHTO(24, 0!<some object>), SHTO(25, 0!<some object>), SHTO(26, 0!<some object>), SHTO(27, 0!<some object>), SHTO(28, 0!<some object>), SHTO(29, 0!<some object>), SHTO(2A, 0!<some object>), SHTO(2B, 0!<some object>), SHTO(2C, 0!<some object>), SHTO(2D, 0!<some object>), SHTO(2E, 0!<some object>), SHTO(2F, 0!<some object>), SHTO(30, 0!<some object>), SHTO(31, 0!<some object>), SHTO(32, 0!<some object>), SHTO(33, 0!<some object>), SHTO(34, 0!<some object>), SHTO(35, 0!<some object>), SHTO(36, 0!<some object>), SHTO(37, 0!<some object>), SHTO(38, 0!<some object>), SHTO(39, 0!<some object>), SHTO(3A, 0!<some object>), SHTO(3B, 0!<some object>), SHTO(3C, 0!<some object>), SHTO(3D, 0!<some object>), SHTO(3E, 0!<some object>), SHTO(3F, 0!<some object>), SHTO(40, 0!<some object>), SHTO(41, 0!<some object>), SHTO(42, 0!<some object>), SHTO(43, 0!<some object>), SHTO(44, 0!<some object>), SHTO(45, 0!<some object>), SHTO(46, 0!<some object>), SHTO(47, 0!<some object>), SHTO(48, 0!<some object>), SHTO(49, 0!<some object>), SHTO(4A, 0!<some object>), SHTO(4B, 0!<some object>), SHTO(4C, 0!<some object>), SHTO(4D, 0!<some object>), SHTO(4E, 0!<some object>), SHTO(4F, 0!<some object>), SHTO(50, 0!<some object>), SHTO(51, 0!<some object>), SHTO(52, 0!<some object>), SHTO(53, 0!<some object>), SHTO(54, 0!<some object>), SHTO(55, 0!<some object>), SHTO(56, 0!<some object>), SHTO(57, 0!<some object>), SHTO(58, 0!<some object>), SHTO(59, 0!<some object>), SHTO(5A, 0!<some object>), SHTO(5B, 0!<some object>), SHTO(5C, 0!<some object>), SHTO(5D, 0!<some object>), SHTO(5E, 0!<some object>), SHTO(5F, 0!<some object>), SHTO(60, 0!<some object>), SHTO(61, 0!<some object>), SHTO(62, 0!<some object>), SHTO(63, 0!<some object>), SHTO(64, 0!<some object>), SHTO(65, 0!<some object>), SHTO(66, 0!<some object>), SHTO(67, 0!<some object>), SHTO(68, 0!<some object>), SHTO(69, 0!<some object>), SHTO(6A, 0!<some object>), SHTO(6B, 0!<some object>), SHTO(6C, 0!<some object>), SHTO(6D, 0!<some object>), SHTO(6E, 0!<some object>), SHTO(6F, 0!<some object>), SHTO(70, 0!<some object>), SHTO(71, 0!<some object>), SHTO(72, 0!<some object>), SHTO(73, 0!<some object>), SHTO(74, 0!<some object>), SHTO(75, 0!<some object>), SHTO(76, 0!<some object>), SHTO(77, 0!<some object>), SHTO(78, 0!<some object>), SHTO(79, 0!<some object>), SHTO(7A, 0!<some object>), SHTO(7B, 0!<some object>), SHTO(7C, 0!<some object>), SHTO(7D, 0!<some object>), SHTO(7E, 0!<some object>), SHTO(7F, 0!<some object>), SHTO(80, 0!<some object>), SHTO(81, 0!<some object>), SHTO(82, 0!<some object>), SHTO(83, 0!<some object>), SHTO(84, 0!<some object>), SHTO(85, 0!<some object>), SHTO(86, 0!<some object>), SHTO(87, 0!<some object>), SHTO(88, 0!<some object>), SHTO(89, 0!<some object>), SHTO(8A, 0!<some object>), SHTO(8B, 0!<some object>), SHTO(8C, 0!<some object>), SHTO(8D, 0!<some object>), SHTO(8E, 0!<some object>), SHTO(8F, 0!<some object>), SHTO(90, 0!<some object>), SHTO(91, 0!<some object>), SHTO(92, 0!<some object>), SHTO(93, 0!<some object>), SHTO(94, 0!<some object>), SHTO(95, 0!<some object>), SHTO(96, 0!<some object>), SHTO(97, 0!<some object>), SHTO(98, 0!<some object>), SHTO(99, 0!<some object>), SHTO(9A, 0!<some object>), SHTO(9B, 0!<some object>), SHTO(9C, 0!<some object>), SHTO(9D, 0!<some object>), SHTO(9E, 0!<some object>), SHTO(9F, 0!<some object>), SHTO(A0, 0!<some object>), SHTO(A1, 0!<some object>), SHTO(A2, 0!<some object>), SHTO(A3, 0!<some object>), SHTO(A4, 0!<some object>), SHTO(A5, 0!<some object>), SHTO(A6, 0!<some object>), SHTO(A7, 0!<some object>), SHTO(A8, 0!<some object>), SHTO(A9, 0!<some object>), SHTO(AA, 0!<some object>), SHTO(AB, 0!<some object>), SHTO(AC, 0!<some object>), SHTO(AD, 0!<some object>), SHTO(AE, 0!<some object>), SHTO(AF, 0!<some object>), SHTO(B0, 0!<some object>), SHTO(B1, 0!<some object>), SHTO(B2, 0!<some object>), SHTO(B3, 0!<some object>), SHTO(B4, 0!<some object>), SHTO(B5, 0!<some object>), SHTO(B6, 0!<some object>), SHTO(B7, 0!<some object>), SHTO(B8, 0!<some object>), SHTO(B9, 0!<some object>), SHTO(BA, 0!<some object>), SHTO(BB, 0!<some object>), SHTO(BC, 0!<some object>), SHTO(BD, 0!<some object>), SHTO(BE, 0!<some object>), SHTO(BF, 0!<some object>), SHTO(C0, 0!<some object>), SHTO(C1, 0!<some object>), SHTO(C2, 0!<some object>), SHTO(C3, 0!<some object>), SHTO(C4, 0!<some object>), SHTO(C5, 0!<some object>), SHTO(C6, 0!<some object>), SHTO(C7, 0!<some object>), SHTO(C8, 0!<some object>), SHTO(C9, 0!<some object>), etc...}

	

big2 is a copy of big1 (count 10000)

big2 is a subset of big1
big1 is a subset of big2

big2 now has every third element removed (count 6667)

big2 is a subset of big1
big1 is NOT a subset of big2
big3 is big1-big2 - count 3333

big3 is a subset of big1
big1 is NOT a subset of big3
big3 is NOT a subset of big2
big2 is NOT a subset of big3


end of bigset testing

End of black box testing - now for the White!


End of HashSet testing

